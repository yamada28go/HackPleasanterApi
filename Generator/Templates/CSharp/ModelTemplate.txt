using HackPleasanterApi.Client.Api.Interface;
using HackPleasanterApi.Client.Api.Models.ItemModel;
using System;
using System.Collections.Generic;
using System.Text;

namespace CsharpSamples.Generated.Models
{
@{
//コード生成に必要な一時変数をまとめて定義する

  // クラス名
  string TargetClassName = Model.SiteDefinition.SiteVariableName;
  // ユーザー拡張要素が定義されたクラス名
  string ExtensionElementsClassName = TargetClassName + "ExtensionElements"; 

}


    /// <summary>
    /// プロジェクト情報クラス
    /// </summary>
    class @(TargetClassName) : DTOBase<@(TargetClassName).@(ExtensionElementsClassName)>
    {
        public @(TargetClassName)()
        {
            // ユーザー拡張データ構造の定義
            this.ExtensionElements = new @(TargetClassName).@(ExtensionElementsClassName)();
            this.ExtensionElements.rawData = new WeakReference<ItemRawData>(this.rawData);

            this.BasicItemData = new BasicItemData();
            this.BasicItemData.rawData = new WeakReference<ItemRawData>(this.rawData);

        }

        /// <summary>
        /// 個別の拡張要素
        /// </summary>
        public class @(ExtensionElementsClassName) : ExtensionElementsBase
        {
            #region 自動生成

            #region Class区分

            @* ClassHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.ClassHash) {

                <text>
                public string @item.VariableName
                {
                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj.ClassHash.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            obj.ClassHash.@(item.ColumnName) = value;
                        }

                        throw new ApplicationException("参照エラー");

                    }
                }
                </text>

            }

            #endregion

            #region Num区分

            @* NumHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.NumHash) {

                <text>
                public decimal @item.VariableName
                {
                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj.NumHash.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            obj.NumHash.@(item.ColumnName) = value;
                        }

                        throw new ApplicationException("参照エラー");

                    }
                }
                </text>

            }

            #endregion

            #region Date区分

            @* NumHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.DateHash) {

                <text>
                public DateTime @item.VariableName
                {
                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj.DateHash.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            obj.DateHash.@(item.ColumnName) = value;
                        }

                        throw new ApplicationException("参照エラー");

                    }
                }
                </text>

            }

            #endregion

            #region Description区分

            @* NumHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.DescriptionHash) {

                <text>
                public string @item.VariableName
                {
                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj.DescriptionHash.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            obj.DescriptionHash.@(item.ColumnName) = value;
                        }

                        throw new ApplicationException("参照エラー");

                    }
                }
                </text>

            }

            #endregion

            #region Check区分

            @* NumHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.CheckHash) {

                <text>
                public bool @item.VariableName
                {
                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj.CheckHash.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            obj.CheckHash.@(item.ColumnName) = value;
                        }

                        throw new ApplicationException("参照エラー");

                    }
                }
                </text>

            }

            #endregion


            #region Attachments区分

            @* NumHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.AttachmentsHash) {

                <text>
                public AttachmentsHash @item.VariableName
                {
                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj.AttachmentsHash.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            obj.AttachmentsHash.@(item.ColumnName) = value;
                        }

                        throw new ApplicationException("参照エラー");

                    }
                }
                </text>

            }

            #endregion


#endregion
        }

    }
}
