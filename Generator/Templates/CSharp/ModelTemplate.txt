using HackPleasanterApi.Client.Api.Interface;
using HackPleasanterApi.Client.Api.Models.ItemModel;
using System;
using System.Collections.Generic;
using System.Text;

namespace CsharpSamples.Generated.Models
{
@{
//コード生成に必要な一時変数をまとめて定義する

  // クラス名
  string TargetClassName = Model.SiteDefinition.SiteVariableName;
  // ユーザー拡張要素が定義されたクラス名
  string ExtensionElementsClassName = TargetClassName + "ExtensionElements"; 

}


    /// <summary>
    /// プロジェクト情報クラス
    /// </summary>
    class @(TargetClassName) : DTOBase<@(TargetClassName).@(ExtensionElementsClassName)>
    {

        public @(TargetClassName)()
        {
            this.rawData = new ItemRawData();
            InternalData();
        }


        public @(TargetClassName)(ItemRawData rawData)
        {
            this.rawData = rawData;
            InternalData();
        }

        /// <summary>
        /// 内部データを初期化する
        /// </summary>
        private void InternalData()
        {
            // ユーザー拡張データ構造の定義
            this.ExtensionElements = new @(TargetClassName).@(ExtensionElementsClassName)();
            this.ExtensionElements.rawData = new WeakReference<ItemRawData>(this.rawData);

            this.BasicItemData = new BasicItemData();
            this.BasicItemData.rawData = new WeakReference<ItemRawData>(this.rawData);
        }

        /// <summary>
        /// 個別の拡張要素
        /// </summary>
        public class @(ExtensionElementsClassName) : ExtensionElementsBase
        {
            #region 自動生成

            #region Class区分

            @* ClassHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.ClassHash) {

                <text>

               /// <summary>
               /// @(item.LabelText)
                /// </summary>
                public string @item.VariableName
                {
                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj?.ClassHash?.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            if (obj.ClassHash == null)
                            {
                                obj.ClassHash = new HackPleasanterApi.Client.Api.Models.ItemModel.Hash.ClassHash();
                            }

                            obj.ClassHash.@(item.ColumnName) = value;

                            return ;
                        }

                        throw new ApplicationException("参照エラー");

                    }
                }
                </text>

            }

            #endregion

            #region Num区分

            @* NumHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.NumHash) {

                <text>

               /// <summary>
               /// @(item.LabelText)
               /// サーバー戻り値では値を持っていない可能性があるので、
               /// get系はnullable型の別名にする。
               /// </summary>
                public decimal? @(item.VariableName)_value
                {
                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj?.NumHash?.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }
                }

               /// <summary>
               /// @(item.LabelText)
               /// </summary>
                public decimal @item.VariableName
                {
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            if (obj.NumHash == null)
                            {
                                obj.NumHash = new HackPleasanterApi.Client.Api.Models.ItemModel.Hash.NumHash();
                            }

                            obj.NumHash.@(item.ColumnName) = value;

                            return ;
                        }

                        throw new ApplicationException("参照エラー");

                    }
                }
                </text>

            }

            #endregion

            #region Date区分

            @* NumHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.DateHash) {

                <text>

               /// <summary>
               /// @(item.LabelText)
               ///
               /// サーバー戻り値では値を持っていない可能性があるので、
               /// get系はnullable型の別名にする。
               /// </summary>
                public DateTime? @(item.VariableName)_value
                {
                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj?.DateHash?.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }
                }

               /// <summary>
               /// @(item.LabelText)
               /// </summary>
                public DateTime @item.VariableName
                {
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            if (obj.DateHash == null)
                            {
                                obj.DateHash = new HackPleasanterApi.Client.Api.Models.ItemModel.Hash.DateHash();
                            }

                            obj.DateHash.@(item.ColumnName) = value;

                            return ;
                        }

                        throw new ApplicationException("参照エラー");

                    }
                }
                </text>

            }

            #endregion

            #region Description区分

            @* DescriptionHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.DescriptionHash) {

                <text>

               /// <summary>
               /// @(item.LabelText)
               /// </summary>
                public string @item.VariableName
                {
                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj?.DescriptionHash?.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            if (obj.DescriptionHash == null)
                            {
                                obj.DescriptionHash = new HackPleasanterApi.Client.Api.Models.ItemModel.Hash.DescriptionHash();
                            }

                            obj.DescriptionHash.@(item.ColumnName) = value;

                            return :
                        }

                        throw new ApplicationException("参照エラー");

                    }
                }
                </text>

            }

            #endregion

            #region Check区分

            @* CheckHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.CheckHash) {

                <text>

               /// <summary>
               /// @(item.LabelText)
               ///
               /// サーバー戻り値では値を持っていない可能性があるので、
               /// get系はnullable型の別名にする。
               /// </summary>
                public bool? @(item.VariableName)_value
                {
                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj?.CheckHash?.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }
                }


               /// <summary>
               /// @(item.LabelText)
               /// </summary>
                public bool @item.VariableName
                {
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {

                            if (obj.CheckHash == null)
                            {
                                obj.CheckHash = new HackPleasanterApi.Client.Api.Models.ItemModel.Hash.CheckHash();
                            }

                            obj.CheckHash.@(item.ColumnName) = value;

                            return ;
                        }

                        throw new ApplicationException("参照エラー");

                    }
                }
                </text>

            }

            #endregion


            #region Attachments区分

            @* AttachmentsHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.AttachmentsHash) {

                <text>

               /// <summary>
               /// @(item.LabelText)
               /// </summary>
                public AttachmentsHash @item.VariableName
                {
                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj?.AttachmentsHash?.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            if (obj.AttachmentsHash == null)
                            {
                                obj.AttachmentsHash = new HackPleasanterApi.Client.Api.Models.ItemModel.Hash.AttachmentsHash();
                            }

                            obj.AttachmentsHash.@(item.ColumnName) = value;

                            return ;
                        }

                        throw new ApplicationException("参照エラー");

                    }
                }
                </text>

            }

            #endregion


#endregion
        }

    }
}
